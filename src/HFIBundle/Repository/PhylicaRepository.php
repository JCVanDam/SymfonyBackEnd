<?php

namespace HFIBundle\Repository;

/**
 * PhylicaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhylicaRepository extends \Doctrine\ORM\EntityRepository
{
  public function getNumPlante()
  {
    $numPlant = null;
    $phylicaNum = $this->createQueryBuilder('q')
      ->select('q.id, q.numeroPlant')
      ->setMaxResults( 1 )
      ->orderBy('q.id', 'DESC')
      ->getQuery()
      ->getOneOrNullResult();
    $needle = strstr($phylicaNum['numeroPlant'],'0');
    $numPlant = strval(intval($needle) + 1);
    $numPlant = str_pad($numPlant, 5, "0", STR_PAD_LEFT);
    $numPlant = "RN " . $numPlant;
    return $numPlant;
  }

  public function getNumeroPlantation($id)
  {
    $numeroPlantation = $this->createQueryBuilder('q')
      ->select('p.numeroPlantation')
      ->leftJoin('q.observation', 'p')
      ->where('q.id = :id')
      ->setParameter('id', $id)
      ->getQuery();
    return !empty($numeroPlantation->getResult()) ? $numeroPlantation->getResult()[0] : null;
  }

  public function getPhylica($id)
  {
    $numeroPlantation = $this->createQueryBuilder('q')
      ->select('q.suiviBiannuelle')
      ->where('q.id = :id')
      ->setParameter('id', $id)
      ->getQuery();
    return !empty($numeroPlantation->getResult()) ? $numeroPlantation->getResult()[0] : null;
  }

  public function getTotalSuivi()
  {
    $totalSuivi = $this->createQueryBuilder('q')
      ->select('count(q.numeroPlant) as counter')
      ->getQuery();
    return($totalSuivi->getResult());
  }

  public function getTotalSuiviNonMort()
  {
    $totalSuiviNonMort = $this->createQueryBuilder('q')
      ->select('count(q.numeroPlant) as counter')
      ->innerJoin('q.suivis', 's')
      ->where("s.mort = 'f'")
      ->getQuery();
    return($totalSuiviNonMort->getResult());
  }

  public function getAveragePerYear()
  {
    $sql = "SELECT
      ROUND(
        AVG(counter)
      )
      FROM (
        SELECT
        COUNT(phylica.date_plantation) AS counter,
        EXTRACT(
          YEAR
          FROM date_plantation
        )
        FROM phylica
        GROUP BY EXTRACT(
          YEAR
          FROM date_plantation
        )
        ORDER BY EXTRACT(
          YEAR
          FROM date_plantation
        ) ASC
      ) AS round;";

    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  public function getVolumePerYear()
  {
    $sql = "SELECT
      COUNT(phylica.date_plantation) AS counter,
      EXTRACT(
        YEAR
        FROM date_plantation
      ) AS year
      FROM phylica
      GROUP BY EXTRACT(
        YEAR
        FROM date_plantation
      )
      ORDER BY EXTRACT(
        YEAR
        FROM date_plantation
      ) ASC;;
    ";

    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  public function getVolumePerDate()
  {
    $listPhylica = $this->createQueryBuilder('q')
      ->select('count(q.numeroPlant) as counter,
        o.dateObservation as date_observation')
      ->leftJoin('q.observation', 'o')
      ->groupby('o.dateObservation')
      ->orderBy('o.dateObservation', 'ASC')
      ->getQuery();

    return($listPhylica->getResult());
  }

  public function getVolumeAge()
  {
    $listPhylica = $this->createQueryBuilder('q')
      ->select('count(q.numeroPlant) as counter,
        TIMESTAMPDIFF(YEAR, o.dateObservation, CURRENT_TIMESTAMP())
        + q.agePlant AS res')
      ->leftJoin('q.observation', 'o')
      ->groupby('res')
      ->getQuery();

    return($listPhylica->getResult());
  }

  public function getCoordinate()
  {
    $coordPhylica = $this->createQueryBuilder('q')
      ->select('o.longitude, o.latitude')
      ->leftJoin('q.observation', 'o')
      ->getQuery();

    return($coordPhylica->getResult());
  }

  public function getCoordinateClose(string $close)
  {
     $sql = "SELECT
       observation.longitude,
       observation.latitude
     FROM observation
     WHERE " . $close;

     $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
     $stmt->execute();
     return $stmt->fetchAll();
  }
}
