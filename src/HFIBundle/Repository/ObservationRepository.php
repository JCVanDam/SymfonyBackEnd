<?php

namespace HFIBundle\Repository;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
  public function getLastId()
  {
    $id = $this->createQueryBuilder('q')
      ->select('q.id')
      ->setMaxResults( 1 )
      ->orderBy('q.id', 'DESC')
      ->getQuery()
      ->getOneOrNullResult();
    return $id ? $id['id'] : $id;
  }

  public function updateForeignKey(int $primaryKey, int $foreignKey)
  {
    $sql = "UPDATE observation SET observation_id = " . $foreignKey . " WHERE id=" . $primaryKey;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  public function updateForeignKeyPhylica(int $primaryKey, int $foreignKey)
  {
    $sql = "UPDATE phylica SET observation_id = " . $foreignKey . " WHERE id=" . $primaryKey;
    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return $stmt->fetchAll();
  }

  public function getTotalPlante()
  {
    $totalPlante = $this->createQueryBuilder('q')
      ->select('q.nbPhylica')
      ->where("q.protocole = 'Restauration Phylica'")
      ->getQuery();
    return !empty($totalPlante->getResult()) ? $totalPlante->getResult()[0] : null;
  }

  public function getStatYear($min, $max)
  {
    $sql = "SELECT
        observation.identifiant_manip,
        eradication.type_observation
      FROM observation
      INNER JOIN fiche_terrain ON fiche_terrain.id = observation.ficheterrain_id
      INNER JOIN eradication ON eradication.id = observation.eradication_id
      WHERE observation.date_observation >= '". $min ."-11-01' AND observation.date_observation < '" . $max . "-11-01'";

    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return($stmt->fetchAll());
  }

  public function getDataEradication()
  {
    $sql = "SELECT
        observation.id,
        observation.identifiant_manip,
        systematique_flore.espece,
        toponyme.nom_site
      FROM observation
      LEFT JOIN fiche_terrain ON fiche_terrain.id = observation.ficheterrain_id
      LEFT JOIN toponyme ON toponyme_id = observation.toponyme_id
      LEFT JOIN eradication ON eradication.id = observation.eradication_id
      LEFT JOIN systematique_flore ON systematique_flore.id = eradication.nomscientifique_id";

    $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
    $stmt->execute();
    return($stmt->fetchAll());
  }

  public function getFicheTerrain($id)
  {
    $ficheTerrain = $this->createQueryBuilder('q')
      ->select('f.typeMilieu, f.statutFicheTerrain, f.longueur, f.largeur,
        f.milieuAutre, f.topographie, f.topoAutre, f.pente,
        f.orientation, f.conditionExposition, f.erosion, f.erosionAutre,
        f.recBlocs, f.recCailloux, f.recSols, f.recGraviers, f.recStrateBryoLichenique,
        f.recStrateHerbacee, f.recStrateArbustive, f.hauteurVegetation, f.habitat, f.commentaireHabitat,
        f.substrat, f.epaisseurSubstrat, f.microRelief, f.penteMicroTopo, f.humidite,
        f.particulariteGeologique, f.categorieMeteo, f.commentaire')
      ->leftJoin('q.ficheTerrain', 'f')
      ->where('q.id = :id')
      ->setParameter('id', $id)
      ->getQuery();
    return !empty($ficheTerrain->getResult()) ? $ficheTerrain->getResult()[0] : null;
  }

  public function getEradication($id)
  {
    $eradication = $this->createQueryBuilder('q')
      ->select('s.nomScientifique, s.id, e.presenceGraine, e.typeColonisation, e.nombrePiedExact, e.nombrePiedApproximatif,
        e.hautMoy, e.hautMax, e.surfaceTraitement, e.typeObservation, e.nbrPatch, e.eradicationNonEfficace,
        e.arrachage, e.etatBachage, e.coupe, e.traitementThermique, e.epandageSel,
        e.produitUtilise, e.dilution, e.longueurTraite, e.largeurTraite,
        e.miseEnPot, e.miseEnHerbier, q.nomEspeceEradication, e.nbrPiedArrache,
        e.phenologie, e.calculeSurface, e.largeurReelleTraite, e.longueurReelleTraite,
        e.surfaceEstimee, e.surfaceArchive, e.surfaceArchiveTraitee')
      ->leftJoin('q.eradication', 'e')
      ->leftJoin('e.nomScientifique', 's')
      ->where('q.id = :id')
      ->setParameter('id', $id)
      ->getQuery();
    return !empty($eradication->getResult()) ? $eradication->getResult()[0] : null;
  }

  public function getMethodologieInvertebre($id)
  {
    $eradication = $this->createQueryBuilder('q')
      ->select('s.nomScientifique, m.modePrelevement, m.milieuPrelevement,m.milieuAutre, m.habitatInvertebre,
         m.nbrePersonne, m.tpsParPers, m.nbrePiege, m.tpsOuverture, m.volLongueur,
         m.volLargeur, m.volHauteur, m.volumeTerre, m.largeur, m.hauteur,
         m.poidsEchantillon')
      ->leftJoin('q.methodologieInvertebre', 'm')
      ->leftJoin('m.planteHote', 's')
      ->where('q.id = :id')
      ->setParameter('id', $id)
      ->getQuery();
    return !empty($eradication->getResult()) ? $eradication->getResult()[0] : null;
  }

  public function getPlantations()
  {
    $plantations = $this->createQueryBuilder('q')
      ->select('q.numeroPlantation')
      ->where('q.numeroPlantation IS NOT NULL')
      ->getQuery();
    return !empty($plantations->getResult()) ? $plantations->getResult(): null;
  }

  public function getPlantation($numeroPlantation)
  {
    $plantation = $this->createQueryBuilder('q')
      ->select('q.id')
      ->where('q.numeroPlantation = :numeroPlantation')
      ->setParameter('numeroPlantation', $numeroPlantation)
      ->getQuery();
    return !empty($plantation->getResult()) ? $plantation->getResult()[0]['id'] : null;
  }
}
